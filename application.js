// Generated by CoffeeScript 1.7.1
(function() {
  var Pomodoro, Task, convertMiliToHuman;

  Pomodoro = (function() {
    Pomodoro.prototype.current_task = null;

    Pomodoro.prototype.timer = null;

    function Pomodoro() {
      this.fbase = new Firebase("https://brilliant-heat-2062.firebaseio.com/");
      this.tasks_index = this.fbase.child('tasks');
      this.enableEvents();
    }

    Pomodoro.prototype.startStop = function() {
      if (this.current_task) {
        return this.stopCurrentTask();
      } else {
        if ($('#task-title').val() !== '') {
          this.current_task = new Task({});
          this.current_task.title = $('#task-title').val();
          return this.startTask(this.current_task);
        } else {
          return alert('Please, add a title for this task');
        }
      }
    };

    Pomodoro.prototype.startTask = function(current_task) {
      this.current_task = current_task;
      this.current_task.start_time = Date.now();
      return this.fbase.child('current_task').set(this.current_task);
    };

    Pomodoro.prototype.stopCurrentTask = function() {
      this.tasks_index.child(this.current_task.id).set({
        id: this.current_task.id,
        title: this.current_task.title,
        start_time: this.current_task.start_time,
        end_time: Date.now()
      });
      this.fbase.child('current_task').remove();
      return this.current_task = null;
    };

    Pomodoro.prototype.updateTimer = function() {
      var spent_time;
      if (window.pomodoro.current_task) {
        spent_time = Date.now() - window.pomodoro.current_task.start_time;
        $('#timer').html(convertMiliToHuman(spent_time));
        if (spent_time >= (25 * 60 * 1000)) {
          clearInterval(window.pomodoro.timer);
          return window.pomodoro.stopCurrentTask();
        }
      } else {
        return clearInterval(window.pomodoro.timer);
      }
    };

    Pomodoro.prototype.renderTasks = function(snapshot) {
      var key, tasks, _i, _len, _ref, _results;
      $('#tasks').html('');
      tasks = snapshot.val();
      _ref = Object.keys(tasks);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(new Task(tasks[key]).render());
      }
      return _results;
    };

    Pomodoro.prototype.displayCurrentTask = function(snapshot) {
      this.current_task = snapshot.val();
      if (this.current_task) {
        this.updateTimer();
        this.timer = setInterval(this.updateTimer, 1000);
        $('.pomodoro-app .panel-heading').show();
        $('.pomodoro-app #task-title').attr('disabled', true);
        $('#startstop').addClass('btn-danger').removeClass('btn-success').html('Stop');
        return $('#task-title').val(this.current_task.title);
      } else {
        $('#timer').html('Pomodoro Finished!');
        $('.pomodoro-app #task-title').attr('disabled', false).val('');
        $('#startstop').removeClass('btn-danger').addClass('btn-success').html('Start');
        return setTimeout(function() {
          $('#timer').html('00:00');
          return $('.pomodoro-app .panel-heading').fadeOut(900);
        }, 2000);
      }
    };

    Pomodoro.prototype.enableEvents = function() {
      this.fbase.child('current_task').on('value', $.proxy(this.displayCurrentTask, this));
      this.tasks_index.on('value', $.proxy(this.renderTasks, this), function(errorObject) {
        return console.log("The read failed: " + errorObject.code);
      });
      $('.pomodoro-app').on('click', 'li a.btn-delete', $.proxy(this.deleteTask, this));
      return $('.pomodoro-app').on('click', 'li a.btn-play', $.proxy(this.repeatTask, this));
    };

    Pomodoro.prototype.deleteTask = function(e) {
      var id;
      id = $(e.target).parents('li').attr('id');
      return this.tasks_index.child(id).remove();
    };

    Pomodoro.prototype.repeatTask = function(e) {
      if (this.current_task) {
        return alert('You can not resume until you finish the current pomodoro');
      } else {
        this.current_task = new Task({
          title: $(e.target).parents('li').find('span').html(),
          start_time: Date.now()
        });
        delete this.current_task.obj;
        return this.fbase.child('current_task').set(this.current_task);
      }
    };

    return Pomodoro;

  })();

  Task = (function() {
    var generateId;

    Task.prototype.id = null;

    Task.prototype.start_time = null;

    Task.prototype.end_time = null;

    function Task(obj) {
      this.obj = obj;
      _.extend(this, obj);
      if (!this.id) {
        this.id = generateId();
      }
    }

    Task.prototype.spent_time = function() {
      if (this.end_time) {
        return convertMiliToHuman(this.end_time - this.start_time);
      } else {
        return '>>>>';
      }
    };

    Task.prototype.render = function() {
      var btn_con, btn_del, btn_group, li;
      li = $('<li>').addClass('list-group-item').attr('id', this.id);
      li.data('start_time', this.start_time);
      btn_group = $('<div>').addClass('btn-group pull-right');
      btn_del = $('<a>').addClass('btn btn-xs btn-danger btn-delete');
      btn_del.append($('<i>').addClass('fa fa-times')).append('&nbsp;Delete');
      btn_con = $('<a>').addClass('btn btn-xs btn-default btn-play');
      btn_con.append($('<i>').addClass('fa fa-chevron-right')).append('&nbsp;Repeat');
      li.append(btn_group.append(btn_con).append(btn_del));
      li.append($('<strong>').addClass('text-info').append(this.spent_time() + '&nbsp;'));
      li.append($('<span>').append(this.title));
      return $('#tasks').append(li);
    };

    generateId = function() {
      var chars, result, today;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      today = new Date();
      result = today.valueOf().toString(16);
      result += chars.substr(Math.floor(Math.random() * chars.length), 1);
      return result += chars.substr(Math.floor(Math.random() * chars.length), 1);
    };

    return Task;

  })();

  convertMiliToHuman = function(milisecs) {
    var minutes, seconds;
    minutes = Math.floor(milisecs / 60000);
    if (minutes < 10) {
      minutes = '0' + minutes;
    }
    seconds = ((milisecs % 60000) / 1000).toFixed(0);
    if (seconds < 10) {
      seconds = '0' + seconds;
    }
    return minutes + ":" + seconds;
  };

  $(function() {
    window.pomodoro = new Pomodoro;
    return $('#startstop').on('click', $.proxy(pomodoro.startStop, pomodoro));
  });

}).call(this);
